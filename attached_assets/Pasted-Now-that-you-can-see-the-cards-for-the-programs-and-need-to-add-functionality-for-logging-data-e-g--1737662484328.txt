Now that you can see the cards for the programs and need to add functionality for logging data (e.g., workouts or meals) associated with the specific program, hereâ€™s how we should proceed:

Steps to Implement Logging Functionality
1. Frontend: Add Click Functionality to Program Cards
Objective: When a user clicks a program card, they should be taken to a page that allows them to log workouts or meals specific to that program.
File to Modify: program-card.tsx
Update: Add an onClick handler to the card.

tsx
Copy
Edit
<Card onClick={() => navigateToProgramLog(program.id)}>
Helper Function:

tsx
Copy
Edit
const navigateToProgramLog = (programId: number) => {
  setLocation(`/programs/${programId}/log`);
};
File to Add or Update: Create a new route for the logging page, e.g., /programs/:id/log.
2. Frontend: Create Program Log Page
Objective: Create a page that dynamically displays the workout or meal logging interface based on the program type.
File to Create: ProgramLog.tsx
Example Code for a Dynamic Logging Page:

tsx
Copy
Edit
import { useQuery } from "@tanstack/react-query";
import { useParams } from "wouter";
import WorkoutLog from "@/components/logging/WorkoutLog";
import MealLog from "@/components/logging/MealLog";
import PosingLog from "@/components/logging/PosingLog";

export default function ProgramLog() {
  const { id } = useParams();

  const { data: program, isLoading } = useQuery(`/api/programs/${id}`);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!program) {
    return <div>Program not found</div>;
  }

  const renderLogComponent = () => {
    switch (program.type) {
      case "lifting":
        return <WorkoutLog programId={program.id} />;
      case "diet":
        return <MealLog programId={program.id} />;
      case "posing":
        return <PosingLog programId={program.id} />;
      default:
        return null;
    }
  };

  return (
    <div>
      <h1>{program.name}</h1>
      <p>{program.description}</p>
      {renderLogComponent()}
    </div>
  );
}
3. Backend: API Endpoint for Program Logging
Objective: Ensure logging (workouts, meals, or posing) is stored in the database.
Files to Modify:
Routes File: Add POST endpoints to handle logging.
Example: /api/logs

ts
Copy
Edit
app.post("/api/programs/:id/logs", async (req, res) => {
  const { id } = req.params;
  const { logType, data } = req.body;

  if (!req.user) {
    return res.status(401).send("Not authenticated");
  }

  try {
    if (logType === "workout") {
      const log = await db.insert(workoutLogs).values({
        clientId: req.user.id,
        clientProgramId: id,
        data,
      }).returning();

      return res.json(log[0]);
    }

    if (logType === "meal") {
      const log = await db.insert(mealLogs).values({
        clientId: req.user.id,
        clientProgramId: id,
        ...data,
      }).returning();

      return res.json(log[0]);
    }

    if (logType === "posing") {
      // Implement posing-specific log logic
    }

    return res.status(400).send("Invalid log type");
  } catch (error) {
    console.error("Error logging data:", error);
    res.status(500).send(error.message);
  }
});
4. Frontend: Components for Logging
File to Create: Create reusable components for logging data.
Example: WorkoutLog.tsx

tsx
Copy
Edit
import { useState } from "react";

export default function WorkoutLog({ programId }) {
  const [logData, setLogData] = useState({ routineId: null, notes: "" });

  const handleSaveLog = async () => {
    try {
      const response = await fetch(`/api/programs/${programId}/logs`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ logType: "workout", data: logData }),
      });

      if (!response.ok) {
        throw new Error("Failed to save log");
      }

      alert("Log saved successfully!");
    } catch (error) {
      console.error("Error saving log:", error);
    }
  };

  return (
    <div>
      <h2>Workout Log</h2>
      <textarea
        value={logData.notes}
        onChange={(e) => setLogData({ ...logData, notes: e.target.value })}
      />
      <button onClick={handleSaveLog}>Save Log</button>
    </div>
  );
}
5. Database Updates
Objective: Ensure the clientPrograms table tracks progress (e.g., completed routines or meals).
Existing Table: clientPrograms
Existing Fields to Use:
clientProgramData: Store progress here (e.g., completed routines or meals).
Example Update Logic:

Increment completedWorkouts after a workout log.
Store detailed progress in clientProgramData.progress.
Recap of Next Steps
Modify the program-card.tsx to navigate to a new logging page.
Create a new ProgramLog page that dynamically renders based on the program type.
Add backend routes to handle logging data.
Create individual logging components (e.g., WorkoutLog, MealLog, PosingLog).
Ensure the database supports progress tracking for clients.